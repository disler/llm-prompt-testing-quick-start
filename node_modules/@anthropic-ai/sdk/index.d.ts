import * as Core from './core.js';
import * as API from './resources/index.js';
import * as Errors from './error.js';
import type { Agent } from '@anthropic-ai/sdk/_shims/agent';
import * as Uploads from './uploads.js';
export interface ClientOptions {
  /**
   * Defaults to process.env["ANTHROPIC_API_KEY"]. Set it to null if you want to send unauthenticated requests.
   */
  apiKey?: string | null;
  /**
   * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
   */
  baseURL?: string;
  /**
   * The maximum amount of time (in milliseconds) that the client should wait for a response
   * from the server before timing out a single request.
   *
   * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
   * much longer than this timeout before the promise succeeds or fails.
   */
  timeout?: number;
  /**
   * An HTTP agent used to manage HTTP(S) connections.
   *
   * If not provided, an agent will be constructed by default in the Node.js environment,
   * otherwise no agent is used.
   */
  httpAgent?: Agent;
  /**
   * Specify a custom `fetch` function implementation.
   *
   * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is
   * defined globally.
   */
  fetch?: Core.Fetch | undefined;
  /**
   * The maximum number of times that the client will retry a request in case of a
   * temporary failure, like a network error or a 5XX error from the server.
   *
   * @default 2
   */
  maxRetries?: number;
  /**
   * Default headers to include with every request to the API.
   *
   * These can be removed in individual requests by explicitly setting the
   * header to `undefined` or `null` in request options.
   */
  defaultHeaders?: Core.Headers;
  /**
   * Default query parameters to include with every request to the API.
   *
   * These can be removed in individual requests by explicitly setting the
   * param to `undefined` in request options.
   */
  defaultQuery?: Core.DefaultQuery;
  authToken?: string | null;
}
/** Instantiate the API Client. */
export declare class Anthropic extends Core.APIClient {
  apiKey: string | null;
  authToken?: string | null;
  private _options;
  constructor({ apiKey, authToken, ...opts }?: ClientOptions);
  completions: API.Completions;
  protected defaultQuery(): Core.DefaultQuery | undefined;
  protected defaultHeaders(): Core.Headers;
  protected validateHeaders(headers: Core.Headers, customHeaders: Core.Headers): void;
  protected authHeaders(): Core.Headers;
  protected apiKeyHeader(): Core.Headers;
  protected authTokenBearer(): Core.Headers;
  static Anthropic: typeof Anthropic;
  static HUMAN_PROMPT: string;
  static AI_PROMPT: string;
  static APIError: typeof Errors.APIError;
  static APIConnectionError: typeof Errors.APIConnectionError;
  static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
  static APIUserAbortError: typeof Errors.APIUserAbortError;
  static NotFoundError: typeof Errors.NotFoundError;
  static ConflictError: typeof Errors.ConflictError;
  static RateLimitError: typeof Errors.RateLimitError;
  static BadRequestError: typeof Errors.BadRequestError;
  static AuthenticationError: typeof Errors.AuthenticationError;
  static InternalServerError: typeof Errors.InternalServerError;
  static PermissionDeniedError: typeof Errors.PermissionDeniedError;
  static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
}
export declare const HUMAN_PROMPT: string, AI_PROMPT: string;
export declare const APIError: typeof Errors.APIError,
  APIConnectionError: typeof Errors.APIConnectionError,
  APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError,
  APIUserAbortError: typeof Errors.APIUserAbortError,
  NotFoundError: typeof Errors.NotFoundError,
  ConflictError: typeof Errors.ConflictError,
  RateLimitError: typeof Errors.RateLimitError,
  BadRequestError: typeof Errors.BadRequestError,
  AuthenticationError: typeof Errors.AuthenticationError,
  InternalServerError: typeof Errors.InternalServerError,
  PermissionDeniedError: typeof Errors.PermissionDeniedError,
  UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
export import toFile = Uploads.toFile;
export import fileFromPath = Uploads.fileFromPath;
export declare namespace Anthropic {
  export import toFile = Uploads.toFile;
  export import fileFromPath = Uploads.fileFromPath;
  export import Completions = API.Completions;
  export import Completion = API.Completion;
  export import CompletionCreateParams = API.CompletionCreateParams;
}
export default Anthropic;
//# sourceMappingURL=index.d.ts.map
