import $Refs from "./refs.js";
import { JSONParserError, InvalidPointerError, MissingPointerError, ResolverError, ParserError, UnmatchedParserError, UnmatchedResolverError } from "./util/errors.js";
import type { ParserOptions } from "./options.js";
import type { $RefsCallback, JSONSchema, SchemaCallback } from "./types/index.js";
export { JSONParserError };
export { InvalidPointerError };
export { MissingPointerError };
export { ResolverError };
export { ParserError };
export { UnmatchedParserError };
export { UnmatchedResolverError };
type RefParserSchema = string | JSONSchema;
/**
 * This class parses a JSON schema, builds a map of its JSON references and their resolved values,
 * and provides methods for traversing, manipulating, and dereferencing those references.
 *
 * @class
 */
export declare class $RefParser {
    /**
     * The parsed (and possibly dereferenced) JSON schema object
     *
     * @type {object}
     * @readonly
     */
    schema: JSONSchema | null;
    /**
     * The resolved JSON references
     *
     * @type {$Refs}
     * @readonly
     */
    $refs: $Refs;
    /**
     * Parses the given JSON schema.
     * This method does not resolve any JSON references.
     * It just reads a single file in JSON or YAML format, and parse it as a JavaScript object.
     *
     * @param [path] - The file path or URL of the JSON schema
     * @param [schema] - A JSON schema object. This object will be used instead of reading from `path`.
     * @param [options] - Options that determine how the schema is parsed
     * @param [callback] - An error-first callback. The second parameter is the parsed JSON schema object.
     * @returns - The returned promise resolves with the parsed JSON schema object.
     */
    parse(schema: RefParserSchema): Promise<JSONSchema>;
    parse(schema: RefParserSchema, callback: SchemaCallback): Promise<void>;
    parse(schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    parse(schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    parse(baseUrl: string, schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    parse(baseUrl: string, schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    static parse(schema: RefParserSchema): Promise<JSONSchema>;
    static parse(schema: RefParserSchema, callback: SchemaCallback): Promise<void>;
    static parse(schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    static parse(schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    static parse(baseUrl: string, schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    static parse(baseUrl: string, schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    /**
     * *This method is used internally by other methods, such as `bundle` and `dereference`. You probably won't need to call this method yourself.*
     *
     * Resolves all JSON references (`$ref` pointers) in the given JSON Schema file. If it references any other files/URLs, then they will be downloaded and resolved as well. This method **does not** dereference anything. It simply gives you a `$Refs` object, which is a map of all the resolved references and their values.
     *
     * See https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#resolveschema-options-callback
     *
     * @param schema A JSON Schema object, or the file path or URL of a JSON Schema file. See the `parse` method for more info.
     * @param options (optional)
     * @param callback (optional) A callback that will receive a `$Refs` object
     */
    resolve(schema: RefParserSchema): Promise<$Refs>;
    resolve(schema: RefParserSchema, callback: $RefsCallback): Promise<void>;
    resolve(schema: RefParserSchema, options: ParserOptions): Promise<$Refs>;
    resolve(schema: RefParserSchema, options: ParserOptions, callback: $RefsCallback): Promise<void>;
    resolve(baseUrl: string, schema: RefParserSchema, options: ParserOptions): Promise<$Refs>;
    resolve(baseUrl: string, schema: RefParserSchema, options: ParserOptions, callback: $RefsCallback): Promise<void>;
    /**
     * *This method is used internally by other methods, such as `bundle` and `dereference`. You probably won't need to call this method yourself.*
     *
     * Resolves all JSON references (`$ref` pointers) in the given JSON Schema file. If it references any other files/URLs, then they will be downloaded and resolved as well. This method **does not** dereference anything. It simply gives you a `$Refs` object, which is a map of all the resolved references and their values.
     *
     * See https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#resolveschema-options-callback
     *
     * @param schema A JSON Schema object, or the file path or URL of a JSON Schema file. See the `parse` method for more info.
     * @param options (optional)
     * @param callback (optional) A callback that will receive a `$Refs` object
     */
    static resolve(schema: RefParserSchema): Promise<$Refs>;
    static resolve(schema: RefParserSchema, callback: $RefsCallback): Promise<void>;
    static resolve(schema: RefParserSchema, options: ParserOptions): Promise<$Refs>;
    static resolve(schema: RefParserSchema, options: ParserOptions, callback: $RefsCallback): Promise<void>;
    static resolve(baseUrl: string, schema: RefParserSchema, options: ParserOptions): Promise<$Refs>;
    static resolve(baseUrl: string, schema: RefParserSchema, options: ParserOptions, callback: $RefsCallback): Promise<void>;
    /**
     * Parses the given JSON schema, resolves any JSON references, and bundles all external references
     * into the main JSON schema. This produces a JSON schema that only has *internal* references,
     * not any *external* references.
     *
     * @param [path] - The file path or URL of the JSON schema
     * @param [schema] - A JSON schema object. This object will be used instead of reading from `path`.
     * @param [options] - Options that determine how the schema is parsed, resolved, and dereferenced
     * @param [callback] - An error-first callback. The second parameter is the bundled JSON schema object
     * @returns - The returned promise resolves with the bundled JSON schema object.
     */
    /**
     * Bundles all referenced files/URLs into a single schema that only has internal `$ref` pointers. This lets you split-up your schema however you want while you're building it, but easily combine all those files together when it's time to package or distribute the schema to other people. The resulting schema size will be small, since it will still contain internal JSON references rather than being fully-dereferenced.
     *
     * This also eliminates the risk of circular references, so the schema can be safely serialized using `JSON.stringify()`.
     *
     * See https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#bundleschema-options-callback
     *
     * @param schema A JSON Schema object, or the file path or URL of a JSON Schema file. See the `parse` method for more info.
     * @param options (optional)
     * @param callback (optional) A callback that will receive the bundled schema object
     */
    static bundle(schema: RefParserSchema): Promise<JSONSchema>;
    static bundle(schema: RefParserSchema, callback: SchemaCallback): Promise<void>;
    static bundle(schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    static bundle(schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    static bundle(baseUrl: string, schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    static bundle(baseUrl: string, schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<JSONSchema>;
    /**
     * Parses the given JSON schema, resolves any JSON references, and bundles all external references
     * into the main JSON schema. This produces a JSON schema that only has *internal* references,
     * not any *external* references.
     *
     * @param [path] - The file path or URL of the JSON schema
     * @param [schema] - A JSON schema object. This object will be used instead of reading from `path`.
     * @param [options] - Options that determine how the schema is parsed, resolved, and dereferenced
     * @param [callback] - An error-first callback. The second parameter is the bundled JSON schema object
     * @returns - The returned promise resolves with the bundled JSON schema object.
     */
    /**
     * Bundles all referenced files/URLs into a single schema that only has internal `$ref` pointers. This lets you split-up your schema however you want while you're building it, but easily combine all those files together when it's time to package or distribute the schema to other people. The resulting schema size will be small, since it will still contain internal JSON references rather than being fully-dereferenced.
     *
     * This also eliminates the risk of circular references, so the schema can be safely serialized using `JSON.stringify()`.
     *
     * See https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#bundleschema-options-callback
     *
     * @param schema A JSON Schema object, or the file path or URL of a JSON Schema file. See the `parse` method for more info.
     * @param options (optional)
     * @param callback (optional) A callback that will receive the bundled schema object
     */
    bundle(schema: RefParserSchema): Promise<JSONSchema>;
    bundle(schema: RefParserSchema, callback: SchemaCallback): Promise<void>;
    bundle(schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    bundle(schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    bundle(baseUrl: string, schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    bundle(baseUrl: string, schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    /**
     * Parses the given JSON schema, resolves any JSON references, and dereferences the JSON schema.
     * That is, all JSON references are replaced with their resolved values.
     *
     * @param [path] - The file path or URL of the JSON schema
     * @param [schema] - A JSON schema object. This object will be used instead of reading from `path`.
     * @param [options] - Options that determine how the schema is parsed, resolved, and dereferenced
     * @param [callback] - An error-first callback. The second parameter is the dereferenced JSON schema object
     * @returns - The returned promise resolves with the dereferenced JSON schema object.
     */
    /**
     * Dereferences all `$ref` pointers in the JSON Schema, replacing each reference with its resolved value. This results in a schema object that does not contain any `$ref` pointers. Instead, it's a normal JavaScript object tree that can easily be crawled and used just like any other JavaScript object. This is great for programmatic usage, especially when using tools that don't understand JSON references.
     *
     * The dereference method maintains object reference equality, meaning that all `$ref` pointers that point to the same object will be replaced with references to the same object. Again, this is great for programmatic usage, but it does introduce the risk of circular references, so be careful if you intend to serialize the schema using `JSON.stringify()`. Consider using the bundle method instead, which does not create circular references.
     *
     * See https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#dereferenceschema-options-callback
     *
     * @param schema A JSON Schema object, or the file path or URL of a JSON Schema file. See the `parse` method for more info.
     * @param options (optional)
     * @param callback (optional) A callback that will receive the dereferenced schema object
     */
    static dereference(schema: RefParserSchema): Promise<JSONSchema>;
    static dereference(schema: RefParserSchema, callback: SchemaCallback): Promise<void>;
    static dereference(schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    static dereference(schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    static dereference(baseUrl: string, schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    static dereference(baseUrl: string, schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    /**
     * Parses the given JSON schema, resolves any JSON references, and dereferences the JSON schema.
     * That is, all JSON references are replaced with their resolved values.
     *
     * @param [path] - The file path or URL of the JSON schema
     * @param [schema] - A JSON schema object. This object will be used instead of reading from `path`.
     * @param [options] - Options that determine how the schema is parsed, resolved, and dereferenced
     * @param [callback] - An error-first callback. The second parameter is the dereferenced JSON schema object
     * @returns - The returned promise resolves with the dereferenced JSON schema object.
     */
    /**
     * Dereferences all `$ref` pointers in the JSON Schema, replacing each reference with its resolved value. This results in a schema object that does not contain any `$ref` pointers. Instead, it's a normal JavaScript object tree that can easily be crawled and used just like any other JavaScript object. This is great for programmatic usage, especially when using tools that don't understand JSON references.
     *
     * The dereference method maintains object reference equality, meaning that all `$ref` pointers that point to the same object will be replaced with references to the same object. Again, this is great for programmatic usage, but it does introduce the risk of circular references, so be careful if you intend to serialize the schema using `JSON.stringify()`. Consider using the bundle method instead, which does not create circular references.
     *
     * See https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#dereferenceschema-options-callback
     *
     * @param schema A JSON Schema object, or the file path or URL of a JSON Schema file. See the `parse` method for more info.
     * @param options (optional)
     * @param callback (optional) A callback that will receive the dereferenced schema object
     */
    dereference(baseUrl: string, schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    dereference(schema: RefParserSchema, options: ParserOptions, callback: SchemaCallback): Promise<void>;
    dereference(schema: RefParserSchema, callback: SchemaCallback): Promise<void>;
    dereference(baseUrl: string, schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    dereference(schema: RefParserSchema, options: ParserOptions): Promise<JSONSchema>;
    dereference(schema: RefParserSchema): Promise<JSONSchema>;
}
export default $RefParser;
export declare const parse: typeof $RefParser.parse;
export declare const resolve: typeof $RefParser.resolve;
export declare const bundle: typeof $RefParser.bundle;
export declare const dereference: typeof $RefParser.dereference;
