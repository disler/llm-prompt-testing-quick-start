import type { HTTPResolverOptions, JSONSchemaObject, Plugin, ResolverOptions } from "./types/index.js";
type DeepPartial<T> = T extends object ? {
    [P in keyof T]?: DeepPartial<T[P]>;
} : T;
/**
 * Options that determine how JSON schemas are parsed, resolved, and dereferenced.
 *
 * @param [options] - Overridden options
 * @class
 */
interface $RefParserOptions {
    /**
     * The `parse` options determine how different types of files will be parsed.
     *
     * JSON Schema `$Ref` Parser comes with built-in JSON, YAML, plain-text, and binary parsers, any of which you can configure or disable. You can also add your own custom parsers if you want.
     */
    parse: {
        json?: Plugin | boolean;
        yaml?: Plugin | boolean;
        binary?: Plugin | boolean;
        text?: (Plugin & {
            encoding?: string;
        }) | boolean;
        [key: string]: Plugin | boolean | undefined;
    };
    /**
     * The `resolve` options control how JSON Schema $Ref Parser will resolve file paths and URLs, and how those files will be read/downloaded.
     *
     * JSON Schema `$Ref` Parser comes with built-in support for HTTP and HTTPS, as well as support for local files (when running in Node.js). You can configure or disable either of these built-in resolvers. You can also add your own custom resolvers if you want.
     */
    resolve: {
        /**
         * Determines whether external $ref pointers will be resolved. If this option is disabled, then external `$ref` pointers will simply be ignored.
         */
        external?: boolean;
        file?: Partial<ResolverOptions> | boolean;
        http?: HTTPResolverOptions | boolean;
    } & {
        [key: string]: Partial<ResolverOptions> | HTTPResolverOptions | boolean | undefined;
    };
    /**
     * By default, JSON Schema $Ref Parser throws the first error it encounters. Setting `continueOnError` to `true`
     * causes it to keep processing as much as possible and then throw a single error that contains all errors
     * that were encountered.
     */
    continueOnError: boolean;
    /**
     * The `dereference` options control how JSON Schema `$Ref` Parser will dereference `$ref` pointers within the JSON schema.
     */
    dereference: {
        /**
         * Determines whether circular `$ref` pointers are handled.
         *
         * If set to `false`, then a `ReferenceError` will be thrown if the schema contains any circular references.
         *
         * If set to `"ignore"`, then circular references will simply be ignored. No error will be thrown, but the `$Refs.circular` property will still be set to `true`.
         */
        circular?: boolean | "ignore";
        /**
         * A function, called for each path, which can return true to stop this path and all
         * subpaths from being dereferenced further. This is useful in schemas where some
         * subpaths contain literal $ref keys that should not be dereferenced.
         */
        excludedPathMatcher?(path: string): boolean;
        /**
         * Callback invoked during dereferencing.
         *
         * @argument {string} path The path being dereferenced (ie. the `$ref` string).
         * @argument {JSONSchemaObject} object The JSON-Schema that the `$ref` resolved to.
         */
        onDereference?(path: string, value: JSONSchemaObject): void;
    };
}
export declare const getNewOptions: (options: DeepPartial<$RefParserOptions>) => $RefParserOptions;
export type Options = $RefParserOptions;
export type ParserOptions = DeepPartial<$RefParserOptions>;
export default $RefParserOptions;
