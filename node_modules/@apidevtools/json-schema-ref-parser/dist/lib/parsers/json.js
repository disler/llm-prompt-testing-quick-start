"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_js_1 = require("../util/errors.js");
exports.default = {
    /**
     * The order that this parser will run, in relation to other parsers.
     */
    order: 100,
    /**
     * Whether to allow "empty" files. This includes zero-byte files, as well as empty JSON objects.
     */
    allowEmpty: true,
    /**
     * Determines whether this parser can parse a given file reference.
     * Parsers that match will be tried, in order, until one successfully parses the file.
     * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case
     * every parser will be tried.
     */
    canParse: ".json",
    /**
     * Parses the given file as JSON
     */
    parse(file) {
        return __awaiter(this, void 0, void 0, function* () {
            let data = file.data;
            if (Buffer.isBuffer(data)) {
                data = data.toString();
            }
            if (typeof data === "string") {
                if (data.trim().length === 0) {
                    return; // This mirrors the YAML behavior
                }
                else {
                    try {
                        return JSON.parse(data);
                    }
                    catch (e) {
                        throw new errors_js_1.ParserError(e.message, file.url);
                    }
                }
            }
            else {
                // data is already a JavaScript value (object, array, number, null, NaN, etc.)
                return data;
            }
        });
    },
};
