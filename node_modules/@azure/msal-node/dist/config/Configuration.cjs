/*! @azure/msal-node v2.6.4 2024-02-17 */
'use strict';
'use strict';

var msalCommon = require('@azure/msal-common');
var HttpClient = require('../network/HttpClient.cjs');

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const DEFAULT_AUTH_OPTIONS = {
    clientId: msalCommon.Constants.EMPTY_STRING,
    authority: msalCommon.Constants.DEFAULT_AUTHORITY,
    clientSecret: msalCommon.Constants.EMPTY_STRING,
    clientAssertion: msalCommon.Constants.EMPTY_STRING,
    clientCertificate: {
        thumbprint: msalCommon.Constants.EMPTY_STRING,
        privateKey: msalCommon.Constants.EMPTY_STRING,
        x5c: msalCommon.Constants.EMPTY_STRING,
    },
    knownAuthorities: [],
    cloudDiscoveryMetadata: msalCommon.Constants.EMPTY_STRING,
    authorityMetadata: msalCommon.Constants.EMPTY_STRING,
    clientCapabilities: [],
    protocolMode: msalCommon.ProtocolMode.AAD,
    azureCloudOptions: {
        azureCloudInstance: msalCommon.AzureCloudInstance.None,
        tenant: msalCommon.Constants.EMPTY_STRING,
    },
    skipAuthorityMetadataCache: false,
};
const DEFAULT_CACHE_OPTIONS = {
    claimsBasedCachingEnabled: false,
};
const DEFAULT_LOGGER_OPTIONS = {
    loggerCallback: () => {
        // allow users to not set logger call back
    },
    piiLoggingEnabled: false,
    logLevel: msalCommon.LogLevel.Info,
};
const DEFAULT_SYSTEM_OPTIONS = {
    loggerOptions: DEFAULT_LOGGER_OPTIONS,
    networkClient: new HttpClient.HttpClient(),
    proxyUrl: msalCommon.Constants.EMPTY_STRING,
    customAgentOptions: {},
};
const DEFAULT_TELEMETRY_OPTIONS = {
    application: {
        appName: msalCommon.Constants.EMPTY_STRING,
        appVersion: msalCommon.Constants.EMPTY_STRING,
    },
};
/**
 * Sets the default options when not explicitly configured from app developer
 *
 * @param auth - Authentication options
 * @param cache - Cache options
 * @param system - System options
 * @param telemetry - Telemetry options
 *
 * @returns Configuration
 * @internal
 */
function buildAppConfiguration({ auth, broker, cache, system, telemetry, }) {
    const systemOptions = {
        ...DEFAULT_SYSTEM_OPTIONS,
        networkClient: new HttpClient.HttpClient(system?.proxyUrl, system?.customAgentOptions),
        loggerOptions: system?.loggerOptions || DEFAULT_LOGGER_OPTIONS,
    };
    return {
        auth: { ...DEFAULT_AUTH_OPTIONS, ...auth },
        broker: { ...broker },
        cache: { ...DEFAULT_CACHE_OPTIONS, ...cache },
        system: { ...systemOptions, ...system },
        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },
    };
}

exports.buildAppConfiguration = buildAppConfiguration;
//# sourceMappingURL=Configuration.cjs.map
