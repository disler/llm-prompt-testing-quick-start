import { matchesSimilarity, matchesLlmRubric, matchesFactuality, matchesClosedQa, matchesClassification, matchesAnswerRelevance, matchesContextRecall, matchesContextRelevance, matchesContextFaithfulness, matchesSelectBest } from './matchers';
import type { Assertion, AssertionType, GradingResult, AtomicTestCase, ApiProvider } from './types';
export declare const MODEL_GRADED_ASSERTION_TYPES: Set<AssertionType>;
export declare function runAssertions({ prompt, provider, test, output, latencyMs, logProbs, cost, }: {
    prompt?: string;
    provider?: ApiProvider;
    test: AtomicTestCase;
    output: string | object;
    latencyMs?: number;
    logProbs?: number[];
    cost?: number;
}): Promise<GradingResult>;
export declare function runAssertion({ prompt, provider, assertion, test, output, latencyMs, logProbs, cost, }: {
    prompt?: string;
    provider?: ApiProvider;
    assertion: Assertion;
    test: AtomicTestCase;
    output: string | object;
    latencyMs?: number;
    logProbs?: number[];
    cost?: number;
}): Promise<GradingResult>;
export declare function runCompareAssertion(test: AtomicTestCase, assertion: Assertion, outputs: string[]): Promise<GradingResult[]>;
export declare function readAssertions(filePath: string): Promise<Assertion[]>;
declare const _default: {
    matchesSimilarity: typeof matchesSimilarity;
    matchesClassification: typeof matchesClassification;
    matchesLlmRubric: typeof matchesLlmRubric;
    matchesFactuality: typeof matchesFactuality;
    matchesClosedQa: typeof matchesClosedQa;
    matchesAnswerRelevance: typeof matchesAnswerRelevance;
    matchesContextRecall: typeof matchesContextRecall;
    matchesContextRelevance: typeof matchesContextRelevance;
    matchesContextFaithfulness: typeof matchesContextFaithfulness;
    matchesComparisonBoolean: typeof matchesSelectBest;
};
export default _default;
//# sourceMappingURL=assertions.d.ts.map