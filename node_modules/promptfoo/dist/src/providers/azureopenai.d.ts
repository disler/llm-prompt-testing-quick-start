import type { ApiProvider, CallApiContextParams, CallApiOptionsParams, EnvOverrides, ProviderEmbeddingResponse, ProviderResponse } from '../types';
interface AzureOpenAiCompletionOptions {
    azureClientId?: string;
    azureClientSecret?: string;
    azureTenantId?: string;
    azureAuthorityHost?: string;
    azureTokenScope?: string;
    deployment_id?: string;
    dataSources?: any;
    apiHost?: string;
    apiBaseUrl?: string;
    apiKey?: string;
    apiVersion?: string;
    temperature?: number;
    top_p?: number;
    frequency_penalty?: number;
    presence_penalty?: number;
    best_of?: number;
    functions?: {
        name: string;
        description?: string;
        parameters: any;
    }[];
    function_call?: 'none' | 'auto' | {
        name: string;
    };
    response_format?: {
        type: 'json_object';
    };
    stop?: string[];
    passthrough?: object;
}
declare class AzureOpenAiGenericProvider implements ApiProvider {
    deploymentName: string;
    apiHost?: string;
    apiBaseUrl?: string;
    config: AzureOpenAiCompletionOptions;
    constructor(deploymentName: string, options?: {
        config?: AzureOpenAiCompletionOptions;
        id?: string;
        env?: EnvOverrides;
    });
    _cachedApiKey?: string;
    getApiKey(): Promise<string>;
    getApiBaseUrl(): string;
    id(): string;
    toString(): string;
    callApi(prompt: string, context?: CallApiContextParams, callApiOptions?: CallApiOptionsParams): Promise<ProviderResponse>;
}
export declare class AzureOpenAiEmbeddingProvider extends AzureOpenAiGenericProvider {
    callEmbeddingApi(text: string): Promise<ProviderEmbeddingResponse>;
}
export declare class AzureOpenAiCompletionProvider extends AzureOpenAiGenericProvider {
    callApi(prompt: string, context?: CallApiContextParams, callApiOptions?: CallApiOptionsParams): Promise<ProviderResponse>;
}
export declare class AzureOpenAiChatCompletionProvider extends AzureOpenAiGenericProvider {
    callApi(prompt: string, context?: CallApiContextParams, callApiOptions?: CallApiOptionsParams): Promise<ProviderResponse>;
}
export {};
//# sourceMappingURL=azureopenai.d.ts.map