"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CohereChatCompletionProvider = void 0;
const cache_1 = require("../cache");
const logger_1 = __importDefault(require("../logger"));
const shared_1 = require("./shared");
class CohereChatCompletionProvider {
    constructor(modelName, options = {}) {
        const { config, id, env } = options;
        this.apiKey = config?.apiKey || env?.COHERE_API_KEY || process.env.COHERE_API_KEY || '';
        this.modelName = modelName;
        if (!CohereChatCompletionProvider.COHERE_CHAT_MODELS.includes(this.modelName)) {
            logger_1.default.warn(`Using unknown Cohere chat model: ${this.modelName}`);
        }
        this.id = id ? () => id : this.id;
        this.config = config || {};
    }
    id() {
        return `cohere:${this.modelName}`;
    }
    async callApi(prompt) {
        if (!this.apiKey) {
            return { error: 'Cohere API key is not set. Please provide a valid apiKey.' };
        }
        const defaultParams = {
            chatHistory: [],
            connectors: [],
            prompt_truncation: 'OFF',
            search_queries_only: false,
            documents: [],
            temperature: 0.3,
            k: 0,
            p: 0.75,
            frequency_penalty: 0,
            presence_penalty: 0,
        };
        const params = { ...defaultParams, ...this.config };
        let body;
        try {
            const promptObj = JSON.parse(prompt);
            if (typeof promptObj === 'object' && promptObj !== null) {
                body = {
                    ...params,
                    ...promptObj,
                    model: this.modelName,
                };
            }
            else {
                throw new Error('Prompt is not a JSON object');
            }
        }
        catch (error) {
            body = {
                message: prompt,
                ...params,
                model: this.modelName,
            };
        }
        logger_1.default.debug(`Calling Cohere API: ${JSON.stringify(body)}`);
        let data, cached = false;
        try {
            ({ data, cached } = (await (0, cache_1.fetchWithCache)('https://api.cohere.ai/v1/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${this.apiKey}`,
                    'X-Client-Name': process.env.COHERE_CLIENT_NAME || 'promptfoo',
                },
                body: JSON.stringify(body),
            }, shared_1.REQUEST_TIMEOUT_MS)));
            logger_1.default.debug(`Cohere chat API response: ${JSON.stringify(data)}`);
            if (data.message) {
                return { error: data.message };
            }
            const tokenUsage = {
                cached: cached ? data.token_count?.total_tokens || 0 : 0,
                total: data.token_count?.total_tokens || 0,
                prompt: data.token_count?.prompt_tokens || 0,
                completion: data.token_count?.response_tokens || 0,
            };
            let output = data.text;
            if (this.config.showSearchQueries && data.search_queries) {
                output +=
                    '\n\nSearch Queries:\n' +
                        data.search_queries
                            .map((query) => query.text)
                            .join('\n');
            }
            if (this.config.showDocuments && data.documents) {
                output +=
                    '\n\nDocuments:\n' +
                        data.documents
                            .map((doc) => JSON.stringify(doc))
                            .join('\n');
            }
            return {
                cached,
                output,
                tokenUsage,
            };
        }
        catch (error) {
            logger_1.default.error(`API call error: ${error}`);
            return { error: `API call error: ${error}` };
        }
    }
}
exports.CohereChatCompletionProvider = CohereChatCompletionProvider;
CohereChatCompletionProvider.COHERE_CHAT_MODELS = [
    'command',
    'command-light',
    'command-nightly',
    'command-light-nightly',
];
//# sourceMappingURL=cohere.js.map