import { ApiProvider, ApiSimilarityProvider, ProviderClassificationResponse, ProviderEmbeddingResponse, ProviderResponse, ProviderSimilarityResponse } from '../types';
interface HuggingfaceTextGenerationOptions {
    apiKey?: string;
    apiEndpoint?: string;
    top_k?: number;
    top_p?: number;
    temperature?: number;
    repetition_penalty?: number;
    max_new_tokens?: number;
    max_time?: number;
    return_full_text?: boolean;
    num_return_sequences?: number;
    do_sample?: boolean;
    use_cache?: boolean;
    wait_for_model?: boolean;
}
export declare class HuggingfaceTextGenerationProvider implements ApiProvider {
    modelName: string;
    config: HuggingfaceTextGenerationOptions;
    constructor(modelName: string, options?: {
        id?: string;
        config?: HuggingfaceTextGenerationOptions;
    });
    id(): string;
    toString(): string;
    getApiKey(): string | undefined;
    callApi(prompt: string): Promise<ProviderResponse>;
}
interface HuggingfaceTextClassificationOptions {
}
export declare class HuggingfaceTextClassificationProvider implements ApiProvider {
    modelName: string;
    config: HuggingfaceTextClassificationOptions;
    constructor(modelName: string, options?: {
        id?: string;
        config?: HuggingfaceTextClassificationOptions;
    });
    id(): string;
    toString(): string;
    callClassificationApi(prompt: string): Promise<ProviderClassificationResponse>;
    callApi(prompt: string): Promise<ProviderResponse>;
}
interface HuggingfaceFeatureExtractionOptions {
    use_cache?: boolean;
    wait_for_model?: boolean;
}
export declare class HuggingfaceFeatureExtractionProvider implements ApiProvider {
    modelName: string;
    config: HuggingfaceFeatureExtractionOptions;
    constructor(modelName: string, options?: {
        id?: string;
        config?: HuggingfaceFeatureExtractionOptions;
    });
    id(): string;
    toString(): string;
    callApi(): Promise<ProviderResponse>;
    callEmbeddingApi(text: string): Promise<ProviderEmbeddingResponse>;
}
interface HuggingfaceSentenceSimilarityOptions {
    use_cache?: boolean;
    wait_for_model?: boolean;
}
export declare class HuggingfaceSentenceSimilarityProvider implements ApiSimilarityProvider {
    modelName: string;
    config: HuggingfaceSentenceSimilarityOptions;
    constructor(modelName: string, options?: {
        id?: string;
        config?: HuggingfaceSentenceSimilarityOptions;
    });
    id(): string;
    toString(): string;
    callApi(): Promise<ProviderResponse>;
    callSimilarityApi(expected: string, input: string): Promise<ProviderSimilarityResponse>;
}
export {};
//# sourceMappingURL=huggingface.d.ts.map