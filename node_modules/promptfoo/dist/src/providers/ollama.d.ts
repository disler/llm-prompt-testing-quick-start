import type { ApiProvider, ProviderEmbeddingResponse, ProviderResponse } from '../types.js';
interface OllamaCompletionOptions {
    num_predict?: number;
    top_k?: number;
    top_p?: number;
    tfs_z?: number;
    seed?: number;
    useNUMA?: boolean;
    num_ctx?: number;
    num_keep?: number;
    num_batch?: number;
    num_gqa?: number;
    num_gpu?: number;
    main_gpu?: number;
    low_vram?: boolean;
    f16_kv?: boolean;
    logits_all?: boolean;
    vocab_only?: boolean;
    use_mmap?: boolean;
    use_mlock?: boolean;
    embedding_only?: boolean;
    rope_frequency_base?: number;
    rope_frequency_scale?: number;
    typical_p?: number;
    repeat_last_n?: number;
    temperature?: number;
    repeat_penalty?: number;
    presence_penalty?: number;
    frequency_penalty?: number;
    mirostat?: number;
    mirostat_tau?: number;
    mirostat_eta?: number;
    penalize_newline?: boolean;
    stop?: string[];
    num_thread?: number;
}
export declare class OllamaCompletionProvider implements ApiProvider {
    modelName: string;
    config: OllamaCompletionOptions;
    constructor(modelName: string, options?: {
        id?: string;
        config?: OllamaCompletionOptions;
    });
    id(): string;
    toString(): string;
    callApi(prompt: string): Promise<ProviderResponse>;
}
export declare class OllamaChatProvider implements ApiProvider {
    modelName: string;
    config: OllamaCompletionOptions;
    constructor(modelName: string, options?: {
        id?: string;
        config?: OllamaCompletionOptions;
    });
    id(): string;
    toString(): string;
    callApi(prompt: string): Promise<ProviderResponse>;
}
export declare class OllamaEmbeddingProvider extends OllamaCompletionProvider {
    callEmbeddingApi(text: string): Promise<ProviderEmbeddingResponse>;
}
export {};
//# sourceMappingURL=ollama.d.ts.map