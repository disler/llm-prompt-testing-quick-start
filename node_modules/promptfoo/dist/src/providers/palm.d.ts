import type { ApiProvider, EnvOverrides, ProviderResponse } from '../types.js';
interface PalmCompletionOptions {
    apiKey?: string;
    apiHost?: string;
    safetySettings?: {
        category: string;
        probability: string;
    }[];
    stopSequences?: string[];
    temperature?: number;
    maxOutputTokens?: number;
    topP?: number;
    topK?: number;
    generationConfig?: Record<string, any>;
}
declare class PalmGenericProvider implements ApiProvider {
    modelName: string;
    config: PalmCompletionOptions;
    env?: EnvOverrides;
    constructor(modelName: string, options?: {
        config?: PalmCompletionOptions;
        id?: string;
        env?: EnvOverrides;
    });
    id(): string;
    toString(): string;
    getApiHost(): string | undefined;
    getApiKey(): string | undefined;
    callApi(prompt: string): Promise<ProviderResponse>;
}
export declare class PalmChatProvider extends PalmGenericProvider {
    static CHAT_MODELS: string[];
    constructor(modelName: string, options?: {
        config?: PalmCompletionOptions;
        id?: string;
        env?: EnvOverrides;
    });
    callApi(prompt: string): Promise<ProviderResponse>;
    callGemini(prompt: string): Promise<ProviderResponse>;
}
export {};
//# sourceMappingURL=palm.d.ts.map