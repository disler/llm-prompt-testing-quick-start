"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PythonProvider = void 0;
const path_1 = __importDefault(require("path"));
const python_shell_1 = require("python-shell");
const logger_1 = __importDefault(require("../logger"));
const cache_1 = require("../cache");
class PythonProvider {
    constructor(scriptPath, options) {
        this.scriptPath = scriptPath;
        this.options = options;
    }
    id() {
        return `python:${this.scriptPath}`;
    }
    async callApi(prompt, context) {
        const absPath = path_1.default.resolve(path_1.default.join(this.options?.config.basePath, this.scriptPath));
        const options = {
            mode: 'text',
            pythonPath: process.env.PROMPTFOO_PYTHON || 'python',
            scriptPath: path_1.default.join(__dirname),
            args: [absPath, prompt, JSON.stringify(this.options), JSON.stringify(context)],
        };
        const cacheKey = `python:${this.scriptPath}:${prompt}:${JSON.stringify(this.options)}`;
        const cache = await (0, cache_1.getCache)();
        let cachedResult;
        if ((0, cache_1.isCacheEnabled)()) {
            cachedResult = (await cache.get(cacheKey));
        }
        if (cachedResult) {
            logger_1.default.debug(`Returning cached result for script ${absPath}`);
            return JSON.parse(cachedResult);
        }
        else {
            logger_1.default.debug(`Running python script ${absPath} with scriptPath ${this.scriptPath} and args ${JSON.stringify(options.args)}`);
            const results = await python_shell_1.PythonShell.run('./wrapper.py', options);
            logger_1.default.debug(`Python script ${absPath} returned: ${results.join('\n')}`);
            const result = JSON.parse(results[results.length - 1]);
            if (result?.type !== 'final_result') {
                throw new Error('The Python script `call_api` function must return a dict with an `output` or `error` string');
            }
            if (!('output' in result.data) && !('error' in result.data)) {
                throw new Error('The Python script `call_api` function must return a dict with an `output` or `error` string');
            }
            if ((0, cache_1.isCacheEnabled)()) {
                await cache.set(cacheKey, JSON.stringify(result.data));
            }
            return result.data;
        }
    }
}
exports.PythonProvider = PythonProvider;
//# sourceMappingURL=pythonCompletion.js.map