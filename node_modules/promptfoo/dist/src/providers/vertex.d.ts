import type { ApiProvider, EnvOverrides, ProviderResponse } from '../types.js';
interface VertexCompletionOptions {
    apiKey?: string;
    apiHost?: string;
    projectId?: string;
    region?: string;
    publisher?: string;
    context?: string;
    examples?: {
        input: string;
        output: string;
    }[];
    safetySettings?: {
        category: string;
        probability: string;
    }[];
    stopSequence?: string[];
    temperature?: number;
    maxOutputTokens?: number;
    topP?: number;
    topK?: number;
}
declare class VertexGenericProvider implements ApiProvider {
    modelName: string;
    config: VertexCompletionOptions;
    env?: EnvOverrides;
    constructor(modelName: string, options?: {
        config?: VertexCompletionOptions;
        id?: string;
        env?: EnvOverrides;
    });
    id(): string;
    toString(): string;
    getApiHost(): string | undefined;
    getProjectId(): string | undefined;
    getApiKey(): string | undefined;
    getRegion(): string;
    getPublisher(): string | undefined;
    callApi(prompt: string): Promise<ProviderResponse>;
}
export declare class VertexChatProvider extends VertexGenericProvider {
    static CHAT_MODELS: string[];
    constructor(modelName: string, options?: {
        config?: VertexCompletionOptions;
        id?: string;
        env?: EnvOverrides;
    });
    callApi(prompt: string): Promise<ProviderResponse>;
    callGeminiApi(prompt: string): Promise<ProviderResponse>;
    callPalm2Api(prompt: string): Promise<ProviderResponse>;
}
export {};
//# sourceMappingURL=vertex.d.ts.map