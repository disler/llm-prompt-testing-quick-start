"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VertexChatProvider = void 0;
const logger_1 = __importDefault(require("../logger"));
const cache_1 = require("../cache");
const shared_1 = require("./shared");
const vertexUtil_1 = require("./vertexUtil");
class VertexGenericProvider {
    constructor(modelName, options = {}) {
        const { config, id, env } = options;
        this.env = env;
        this.modelName = modelName;
        this.config = config || {};
        this.id = id ? () => id : this.id;
    }
    id() {
        return `vertex:${this.modelName}`;
    }
    toString() {
        return `[Google Vertex Provider ${this.modelName}]`;
    }
    getApiHost() {
        return (this.config.apiHost ||
            this.env?.VERTEX_API_HOST ||
            process.env.VERTEX_API_HOST ||
            `${this.getRegion()}-aiplatform.googleapis.com`);
    }
    getProjectId() {
        return this.config.projectId || this.env?.VERTEX_PROJECT_ID || process.env.VERTEX_PROJECT_ID;
    }
    getApiKey() {
        return this.config.apiKey || this.env?.VERTEX_API_KEY || process.env.VERTEX_API_KEY;
    }
    getRegion() {
        return (this.config.region || this.env?.VERTEX_REGION || process.env.VERTEX_REGION || 'us-central1');
    }
    getPublisher() {
        return (this.config.publisher ||
            this.env?.VERTEX_PUBLISHER ||
            process.env.VERTEX_PUBLISHER ||
            'google');
    }
    // @ts-ignore: Prompt is not used in this implementation
    async callApi(prompt) {
        throw new Error('Not implemented');
    }
}
class VertexChatProvider extends VertexGenericProvider {
    constructor(modelName, options = {}) {
        if (!VertexChatProvider.CHAT_MODELS.includes(modelName)) {
            logger_1.default.warn(`Using unknown Google Vertex chat model: ${modelName}`);
        }
        super(modelName, options);
    }
    async callApi(prompt) {
        if (!this.getApiKey()) {
            throw new Error('Google Vertex API key is not set. Set the VERTEX_API_KEY environment variable or add `apiKey` to the provider config. You can get an API token by running `gcloud auth print-access-token`');
        }
        if (!this.getProjectId()) {
            throw new Error('Google Vertex project ID is not set. Set the VERTEX_PROJECT_ID environment variable or add `projectId` to the provider config.');
        }
        if (this.modelName.includes('gemini')) {
            return this.callGeminiApi(prompt);
        }
        return this.callPalm2Api(prompt);
    }
    async callGeminiApi(prompt) {
        // https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/gemini#gemini-pro
        let contents = (0, shared_1.parseChatPrompt)(prompt, {
            role: 'user',
            parts: {
                text: prompt,
            },
        });
        const { contents: updatedContents, coerced } = (0, vertexUtil_1.maybeCoerceToGeminiFormat)(contents);
        if (coerced) {
            logger_1.default.debug(`Coerced JSON prompt to Gemini format: ${JSON.stringify(contents)}`);
            contents = updatedContents;
        }
        const body = {
            contents,
            generation_config: {
                context: this.config.context,
                examples: this.config.examples,
                safetySettings: this.config.safetySettings,
                stopSequence: this.config.stopSequence,
                temperature: this.config.temperature,
                maxOutputTokens: this.config.maxOutputTokens,
                topP: this.config.topP,
                topK: this.config.topK,
            },
        };
        logger_1.default.debug(`Calling Google Vertex API (Gemini): ${JSON.stringify(body)}`);
        let data, cached;
        try {
            ({ cached, data } = await (0, cache_1.fetchWithCache)(
            // POST https://us-central1-aiplatform.googleapis.com/
            `https://${this.getApiHost()}/v1/projects/${this.getProjectId()}/locations/${this.getRegion()}/publishers/${this.getPublisher()}/models/${this.modelName}:streamGenerateContent`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${this.getApiKey()}`,
                },
                body: JSON.stringify(body),
            }, shared_1.REQUEST_TIMEOUT_MS));
        }
        catch (err) {
            return {
                error: `API call error: ${String(err)}`,
            };
        }
        logger_1.default.debug(`\tGemini API response: ${JSON.stringify(data)}`);
        try {
            const error = data.error || data[0].error;
            if (error) {
                return {
                    error: `Error ${error.code}: ${error.message}`,
                };
            }
            const output = data
                .map((datum) => {
                const part = datum.candidates[0].content.parts[0];
                if ('text' in part) {
                    return part.text;
                }
                return JSON.stringify(part);
            })
                .join('');
            const lastData = data[data.length - 1];
            const tokenUsage = cached
                ? {
                    cached: lastData.usageMetadata.totalTokenCount,
                }
                : {
                    total: lastData.usageMetadata.totalTokenCount,
                    prompt: lastData.usageMetadata.promptTokenCount,
                    completion: lastData.usageMetadata.completionTokenCount,
                };
            return {
                cached,
                output,
                tokenUsage,
            };
        }
        catch (err) {
            return {
                error: `Gemini API response error: ${String(err)}: ${JSON.stringify(data)}`,
            };
        }
    }
    async callPalm2Api(prompt) {
        // https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/text-chat#generative-ai-text-chat-drest
        const instances = (0, shared_1.parseChatPrompt)(prompt, [
            {
                messages: [
                    {
                        author: 'user',
                        content: prompt,
                    },
                ],
            },
        ]);
        const body = {
            instances,
            parameters: {
                context: this.config.context,
                examples: this.config.examples,
                safetySettings: this.config.safetySettings,
                stopSequence: this.config.stopSequence,
                temperature: this.config.temperature,
                maxOutputTokens: this.config.maxOutputTokens,
                topP: this.config.topP,
                topK: this.config.topK,
            },
        };
        logger_1.default.debug(`Calling Google Vertex API: ${JSON.stringify(body)}`);
        let data;
        try {
            ({ data } = (await (0, cache_1.fetchWithCache)(
            // POST https://us-central1-aiplatform.googleapis.com/
            `https://${this.getApiHost()}/v1/projects/${this.getProjectId()}/locations/${this.getRegion()}/publishers/${this.getPublisher()}/models/${this.modelName}:predict`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${this.getApiKey()}`,
                },
                body: JSON.stringify(body),
            }, shared_1.REQUEST_TIMEOUT_MS)));
        }
        catch (err) {
            return {
                error: `API call error: ${String(err)}`,
            };
        }
        logger_1.default.debug(`\tVertex API response: ${JSON.stringify(data)}`);
        try {
            if (data.error) {
                return {
                    error: `Error ${data.error.code}: ${data.error.message}`,
                };
            }
            const output = data.predictions[0].candidates[0].content;
            return {
                output,
            };
        }
        catch (err) {
            return {
                error: `API response error: ${String(err)}: ${JSON.stringify(data)}`,
            };
        }
    }
}
exports.VertexChatProvider = VertexChatProvider;
VertexChatProvider.CHAT_MODELS = [
    'chat-bison',
    'chat-bison@001',
    'chat-bison-32k',
    'chat-bison-32k@001',
    'codechat-bison',
    'codechat-bison@001',
    'codechat-bison-32k',
    'codechat-bison-32k@001',
    'gemini-pro',
    'gemini-ultra',
];
//# sourceMappingURL=vertex.js.map