import type { CsvRow, TestCase, TestSuite, TestSuiteConfig, VarMapping } from './types';
export declare function readVarsFiles(pathOrGlobs: string | string[], basePath?: string): Promise<Record<string, string | string[] | object>>;
export declare function readTestsFile(varsPath: string, basePath?: string): Promise<CsvRow[]>;
type TestCaseWithVarsFile = TestCase<Record<string, string | string[] | object> | string | string[]>;
export declare function readTest(test: string | TestCaseWithVarsFile, basePath?: string): Promise<TestCase>;
export declare function readTests(tests: TestSuiteConfig['tests'], basePath?: string): Promise<TestCase[]>;
interface SynthesizeOptions {
    prompts: string[];
    instructions?: string;
    tests: TestCase[];
    numPersonas?: number;
    numTestCasesPerPersona?: number;
}
export declare function synthesizeFromTestSuite(testSuite: TestSuite, options: Partial<SynthesizeOptions>): Promise<VarMapping[]>;
export declare function synthesize({ prompts, instructions, tests, numPersonas, numTestCasesPerPersona, }: SynthesizeOptions): Promise<VarMapping[]>;
export {};
//# sourceMappingURL=testCases.d.ts.map